{
    "collab_server" : "",
    "contents" : "library(readxl)\nX2016txttooExcel <- read_excel(\"~/Desktop/EMSE 6992 Portfolio/FInal Project/FinalProjectEMSE6992/EMSEtrial/Data/2016txttooExcel.xls\",\n                               col_types = c(\"numeric\", \"numeric\", \"numeric\",\"numeric\", \"numeric\", \"numeric\",\n                                             \"date\", \"numeric\", \"numeric\", \"numeric\",\"numeric\", \"numeric\", \"numeric\",\n                                             \"numeric\", \"numeric\", \"numeric\",\"numeric\", \"numeric\", \"numeric\",\n                                             \"numeric\", \"numeric\", \"numeric\",\"numeric\", \"numeric\", \"numeric\",\n                                             \"numeric\", \"numeric\", \"numeric\",\"numeric\", \"numeric\", \"numeric\",\n                                             \"numeric\", \"numeric\", \"numeric\",\"numeric\"))\nFARS_16 <- as.data.frame(X2016txttooExcel, header = TRUE, as.is=TRUE)\n\nlibrary(\"stringr\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\nlibrary(\"plyr\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\nlibrary(\"knitr\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\nlibrary(\"gridExtra\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\nlibrary(\"png\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\nlibrary(\"pander\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\nlibrary(\"dplyr\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# SETTING UP DATAFRAME FROM EXCEL DATAFRAME ------------------------------\n# df = FARS_YY dataframe (df) (ex: FARS_16) \n# YYYY = case year of the Excel dataframe (ex: 2016)\nfatal_YYnasetup <- function(df, YYYY) {\n  #df = FARS_YY\n  #YYYY = case year\n  y = YYYY\n  fataldf <- as.data.frame(cbind.data.frame(df$casenum, df$statenum, df$vnumber, df$pnumber, df$city, df$county, df$latitude,\n                                            df$longitude, df$age, df$vfatcount, df$accday, df$accmon,\n                                            df$caseyear,df$accdate, df$modelyr, df$make, \n                                            df$dridistract1, df$dridistract2, df$dridistract3), \n                           header = TRUE, as.is = TRUE, stringsAsFactor=FALSE)\n  colnames(fataldf) <- c(\"casenum\", \"statenum\", \"vehnum\",\"pernum\", \"citynum\", \"countynum\", \"lat\", \"long\", \"age\", \"numfatalveh\", \"day\", \"month\", \n                         \"year\",\"date\", \"modelyr\", \"make\", \"dridistract1\", \"dridistract2\", \"dridistract3\")\n  #START Getting Date to be a Date\n  fataldf$date <- df$accdate\n  fataldf$date <-format.POSIXct(fataldf$date, format = \"%m/%Y\")\n  #END\n  #Fixing city and county as num\n  fataldf$citynum <- as.integer(fataldf$citynum)\n  fataldf$countynum <- as.integer(fataldf$countynum)\n  fataldf$lat <- as.character(fataldf$lat)\n  fataldf$long <- as.character(fataldf$long)\n  fataldf$age <- as.integer(fataldf$age)\n  fataldf <- unique(fataldf)\n  #removes error coded ages and sets them to NA so that the person is still counted\n  #998 code in age means that it wasn't indicated\n  #999 code in age means that it was unknown\n  fataldf$age <- na_if(fataldf$age, 998)\n  fataldf$age <- na_if(fataldf$age, 999)\n  \n  return(fataldf)\n}\n\nfatal_YYsetup <- function(df, YYYY) {\n  #df = FARS_YY\n  #YYYY = case year\n  y = YYYY\n  fataldf <- as.data.frame(cbind.data.frame(df$casenum, df$statenum, df$vnumber, df$pnumber, df$city, df$county, df$latitude,\n                                            df$longitude, df$age, df$vfatcount, df$accday, df$accmon,\n                                            df$caseyear,df$accdate, df$modelyr, df$make, \n                                            df$dridistract1, df$dridistract2, df$dridistract3), \n                           header = TRUE, as.is = TRUE, stringsAsFactor=FALSE)\n  colnames(fataldf) <- c(\"casenum\", \"statenum\", \"vehnum\",\"pernum\", \"citynum\", \"countynum\", \"lat\", \"long\", \"age\", \"numfatalveh\", \"day\", \"month\", \n                         \"year\",\"date\", \"modelyr\", \"make\", \"dridistract1\", \"dridistract2\", \"dridistract3\")\n  #START Getting Date to be a Date\n  fataldf$date <- df$accdate\n  fataldf$date <-format.POSIXct(fataldf$date, format = \"%m/%Y\")\n  #END\n  #Fixing city and county as num\n  fataldf$citynum <- as.integer(fataldf$citynum)\n  fataldf$countynum <- as.integer(fataldf$countynum)\n  fataldf$lat <- as.character(fataldf$lat)\n  fataldf$long <- as.character(fataldf$long)\n  fataldf$age <- as.integer(fataldf$age)\n  fataldf <- unique(fataldf)\n  #removes error coded ages and sets them to NA so that the person is still counted\n  fataldf <- fataldf[fataldf$age < 997,]\n  \n  return(fataldf)\n}\n\n## STORE RESULT OF FUNCTION IN MAIN DATA FRAME ##\n#INPUT EXAMPLE:   fatal_16 <- fatal_YYsetup(FARS_16, 2016) #\nfatal_16na <- fatal_YYnasetup(FARS_16, 2016)\nfatal_16 <- fatal_YYsetup(FARS_16, 2016)\n\n\n# FINDING CELL CASES ---------------------------------\n#Function for returning distracted driving subdataframe with cellphoneuse as a binomial indicator \n#INPUT: df = fatal_YY YY = case year\n#OUTPUT: fataldisdf\nfindingCellCases <- function(df, YY) {\n  #df = fatal_YY\n  #YY = case year\n  setupfataldis <- function(df) {\n    setupdrf <- function(df){\n      #5 = Talking or listening to cell phone\n      #6 = While dialing Cell phone\n      #15 = Other cell phone distraction\n      df$cellphoneuse <- ifelse(df$dridistract1 == 5, 1,\n                                ifelse(df$dridistract2 == 5, 1,\n                                       ifelse(df$dridistract3 == 5, 1,\n                                              ifelse(df$dridistract1 == 6, 1,\n                                                     ifelse(df$dridistract2 == 6, 1,\n                                                            ifelse(df$dridistract3 == 6, 1,\n                                                                   ifelse(df$dridistract1 == 15, 1,\n                                                                          ifelse(df$dridistract2 == 15, 1,\n                                                                                 ifelse(df$dridistract3 == 15, 1, 0)))))))))\n      drop <- c(\"citynum\",\"countynum\",\"lat\",\"long\",\"dridistract1\", \"dridistract2\",\"dridistract3\")\n      df = df[,!(names(df) %in% drop)]\n      return(df)\n    }\n    fataldisYY <- setupdrf(df)\n    return(fataldisYY)\n  }\n  fataldisYY <- setupfataldis(df)\n  return(fataldisYY)\n}\n\n\n\nfatal_16nads <- findingCellCases(fatal_16na, 16)\nfatal_16ds <- findingCellCases(fatal_16, 16)\n\n\n# Setting Dataset ---------------------------------------------------------\n#create dataset to be used with casenum, statenum, vehnum, persontotal (total number of people in car), \n#     agemin (minimum age of person in car), agemax (max age of person in car), numfatal (number of fatalities in vehicle),\n#     day, month, year, date, modelyear, make, cellphoneuse\n\n#Function for labeling which cases had duplicate entries (due to mulitple vehicles or multiple people) \n#INPUT: df = fatal_YYds\n#OUTPUT: fatal_YYds with duplicate label column\nfindingDuplicateCases <- function(df) {\n  #df = casedf\n  ndf <- df\n  ndf$duplicate <- \"no\"\n  lengthcases <- length(df$casenum)\n  rownames(df) <- c(1:length(df$casenum))\n  i = 1\n  for (w in 2:lengthcases) {\n    testrow <- ndf[i,]\n    if (w != i){\n      comparerow <- df[w,]\n      if (testrow[1,1] == comparerow[1,1]) {\n        if(testrow[1,2] == comparerow[1,2]){\n          ndf[i,]$duplicate <- \"yes\"\n          ndf[w,]$duplicate <- \"yes\"\n        } else {\n          if (ndf[i,]$duplicate == \"yes\") {\n            ndf[i,]$duplicate == \"yes\"\n          } else {\n            ndf[i,]$duplicate <- \"no\"\n          }\n        }\n      } else {\n        if (ndf[i,]$duplicate == \"yes\") {\n          ndf[i,]$duplicate == \"yes\"\n        } else {\n          ndf[i,]$duplicate <- \"no\"\n        }\n      }\n    } else {\n      next\n    }\n    i = i + 1\n  } #close for loop\n  return(ndf)\n}\n\nfatal_16nads <- findingDuplicateCases(fatal_16nads)\nfatal_16ds <- findingDuplicateCases(fatal_16ds)\n\n\n#Function for returning data frame from fatal_16ds that were duplicates \n#INPUT: df = fatal_YYds \n#OUTPUT: ysdf (data frame from \"yes\")\nyesnadf <- function(df) {\n  ydf <- df[df$duplicate == \"yes\",]\n  drop <- c(\"duplicate\",\"pernum\")\n  ydf = ydf[,!(names(ydf) %in% drop)]\n  \n  ydf$casestateveh <- paste(ydf$casenum,ydf$statenum,ydf$vehnum, sep = \"\")\n  ndf <- data.frame(casenum = numeric(), statenum = numeric(), vehnum = numeric(), persontotal = numeric(),\n                    agemin = numeric(), agemax = numeric(),\n                    numfatal = numeric(), day = numeric(), month = numeric(),\n                    year = numeric(), date = character(), modelyear = numeric(), make = numeric(), cellphoneuse = numeric())\n  \n  caselist <- unique(ydf$casestateveh)\n  for (i in caselist) {\n    \n    cdf <- ydf[ydf$casestateveh == i,]\n    \n    pt <- length(cdf$casenum)\n    \n    cr <- cdf\n    drop <- \"age\"\n    cr = cr[,!(names(cr) %in% drop)]\n    cr <- unique(cr)\n    cdf <- cdf[!is.na(cdf$age),]\n    if (length(cdf$age) == 0){\n      minage <- NA\n      maxage <- NA\n    } else {\n      if (length(cdf$age) > 0 & length(cdf$age) < 2) {\n        minage <- cdf$age\n        maxage <- cdf$age\n      }  else {\n        minage <- min(cdf$age)\n        maxage <- max(cdf$age)\n      }\n    }\n    \n    ndf <- rbind(ndf, data.frame(casenum = cr[1,1], statenum = cr[1,2], vehnum = cr[1,3], \n                                 persontotal = pt, agemin = minage, agemax = maxage, numfatal = cr[1,4],\n                                 day = cr[1,5], month = cr[1,6], year = cr[1,7], date = cr[1,8], \n                                 modelyear = cr[1,9], make = cr[1,10], cellphoneuse = cr[1,11]))\n    \n  }\n  return(ndf)\n}\n\nyesdf16na <- yesnadf(fatal_16nads)\n\nyesdf <- function(df) {\n  ydf <- df[df$duplicate == \"yes\",]\n  drop <- c(\"duplicate\",\"pernum\")\n  ydf = ydf[,!(names(ydf) %in% drop)]\n  \n  ydf$casestateveh <- paste(ydf$casenum,ydf$statenum,ydf$vehnum, sep = \"\")\n  ndf <- data.frame(casenum = numeric(), statenum = numeric(), vehnum = numeric(), persontotal = numeric(),\n                    agemin = numeric(), agemax = numeric(),\n                    numfatal = numeric(), day = numeric(), month = numeric(),\n                    year = numeric(), date = character(), modelyear = numeric(), make = numeric(), cellphoneuse = numeric())\n  \n  caselist <- unique(ydf$casestateveh)\n  for (i in caselist) {\n    cdf <- ydf[ydf$casestateveh == i,]\n    \n    pt <- length(cdf$casenum)\n    \n    cr <- cdf\n    drop <- \"age\"\n    cr = cr[,!(names(cr) %in% drop)]\n    cr <- unique(cr)\n    \n    minage <- min(cdf$age)\n    maxage <- max(cdf$age)\n    ndf <- rbind(ndf, data.frame(casenum = cr[1,1], statenum = cr[1,2], vehnum = cr[1,3], \n                                 persontotal = pt, agemin = minage, agemax = maxage, numfatal = cr[1,4],\n                                 day = cr[1,5], month = cr[1,6], year = cr[1,7], date = cr[1,8], \n                                 modelyear = cr[1,9], make = cr[1,10], cellphoneuse = cr[1,11]))\n    \n  }\n  return(ndf)\n  \n}\n\nyesdf16 <- yesdf(fatal_16ds)\n\nnodf <- function(df) {\n  ndf <- df[df$duplicate == \"no\",]\n  drop <- c(\"duplicate\", \"pernum\")\n  ndf = ndf[,!(names(ndf) %in% drop)]\n  ndf$casestateveh <- paste(ndf$casenum,ndf$statenum,ndf$vehnum, sep = \"\")\n  mdf <- data.frame(casenum = numeric(), statenum = numeric(), vehnum = numeric(), persontotal = numeric(),\n                    agemin = numeric(), agemax = numeric(),\n                    numfatal = numeric(), day = numeric(), month = numeric(),\n                    year = numeric(), date = character(), modelyear = numeric(), make = numeric(), cellphoneuse = numeric())\n  caselist <- unique(ndf$casestateveh)\n  for (i in caselist) {\n    cdf <- ndf[ndf$casestateveh == i,]\n    pt <- length(cdf$casenum)\n    cr <- cdf\n    #print(cr)\n    minage <- cdf$age\n    maxage <- cdf$age\n    mdf <- rbind(mdf, data.frame(casenum = cr[1,1], statenum = cr[1,2], vehnum = cr[1,3], \n                                 persontotal = pt, agemin = minage, agemax = maxage, numfatal = cr[1,5],\n                                 day = cr[1,6], month = cr[1,7], year = cr[1,8], date = cr[1,9], \n                                 modelyear = cr[1,10], make = cr[1,11], cellphoneuse = cr[1,12]))\n    \n  }\n  return(mdf)\n}\n\nnodf16 <- nodf(fatal_16ds)\nnodf16na <- nodf(fatal_16nads)\n\nfulldataset <- rbind(yesdf16, nodf16)\nfulldatasetna <- rbind(yesdf16na, nodf16na)\n\n\ntableToCSV <- function(df) {\n  #df = fulldata\n  row.names(df)<- NULL\n  colnames(df) <- c(\"casenum\", \"statenum\", \"vehnum\", \"persontotal\",\"agemin\",\"agemax\",\"numfatal\",\"day\",\"month\",\n                    \"year\",\"date\",\"modelyear\",\"make\",\"cellphoneuse\")\n  write.csv(df, file = \"fulldatasetna.csv\")\n}\ntableToCSV(fulldatasetna)\n",
    "created" : 1542307995126.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2246439048",
    "id" : "E9EA05D3",
    "lastKnownWriteTime" : 1542322383,
    "last_content_update" : 1542322383452,
    "path" : "~/Desktop/EMSE 6992 Portfolio/FInal Project/FinalProjectEMSE6992/EMSEtrial/code.R",
    "project_path" : "code.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}